# server:
#   port: 8080

spring:
  application:
    name: platform
---

spring:
  # profiles: default
  config:
    activate:
      on-profile: default
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        implicit_naming_strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl
  cloud:
    stream:
      kafka:
        binder:
          brokers: localhost:9092
        stream:
          function:
            definition: consumerAutoPublished;consumerAccessRequested;consumerPointsDeducted;consumerBookViewed
          bindings:
            consumerAutoPublished-in-0:
              destination: bookwork.auto-published # <<< aiservice가 발행하는 토픽 이름으로 변경!
              group: platform
              contentType: application/json
              consumer:
                auto-offset-reset: earliest
            consumerAccessRequested-in-0:
              destination: bookwork.access-requested # <<< 사용자 관리에서 오는 토픽 이름 (예시, 팀과 협의)
              group: platform
              contentType: application/json
              consumer:
                auto-offset-reset: earliest
            consumerPointsDeducted-in-0:
              destination: bookwork.points-deducted # <<< 포인트 서비스에서 오는 토픽 이름 (예시, 팀과 협의)
              group: platform
              contentType: application/json
              consumer:
                auto-offset-reset: earliest
            consumerBookViewed-in-0:
              destination: bookwork.book-viewed # <<< platform 내부에서 발행하는 토픽 이름 (예시, 팀과 협의)
              group: platform
              contentType: application/json
              consumer:
                auto-offset-reset: earliest

logging:
  level:
    org.hibernate.type: trace
    org.springframework.cloud: debug

api:
  url:
    platform: localhost:8085 # <<< 이전 단계에서 8080으로 통일하기로 했으므로 수정

server:
  port: 8085 # <<< 8085 대신 8080으로 통일합니다.

---

spring:
  # profiles: docker
  config:
    activate:
      on-profile: docker
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        implicit_naming_strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl
  cloud:
    stream:
      kafka:
        binder:
          brokers: my-kafka:9092 # Docker 환경에서는 Kubernetes Service 이름을 사용 (예: my-kafka)
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
          function:
            definition: consumerAutoPublished;consumerAccessRequested;consumerPointsDeducted;consumerBookViewed
          bindings:
            consumerAutoPublished-in-0:
              destination: bookwork.auto-published # <<< aiservice가 발행하는 토픽 이름으로 변경!
              group: platform
              contentType: application/json
              consumer:
                auto-offset-reset: earliest
            consumerAccessRequested-in-0:
              destination: bookwork.access-requested # <<< 사용자 관리에서 오는 토픽 이름 (예시, 팀과 협의)
              group: platform
              contentType: application/json
              consumer:
                auto-offset-reset: earliest
            consumerPointsDeducted-in-0:
              destination: bookwork.points-deducted # <<< 포인트 서비스에서 오는 토픽 이름 (예시, 팀과 협의)
              group: platform
              contentType: application/json
              consumer:
                auto-offset-reset: earliest
            consumerBookViewed-in-0:
              destination: bookwork.book-viewed # <<< platform 내부에서 발행하는 토픽 이름 (예시, 팀과 협의)
              group: platform
              contentType: application/json
              consumer:
                auto-offset-reset: earliest

api:
  url:
    platform: platform:8085 # Docker 환경에서는 컨테이너 이름을 사용 (예: platform)