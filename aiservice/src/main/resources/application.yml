# AI 서비스의 application.yml

server:
  port: 8084

spring:
  application:
    name: aiservice

  # --- 기본 프로파일 (default) 설정 ---
  config:
    activate:
      on-profile: default # 'default' 프로파일 활성화
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        implicit_naming_strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl
  cloud:
    function:
      # PolicyHandler에 정의된 모든 Consumer 빈 메서드 이름을 여기에 추가합니다.
      # publicationRequestedIn(), publicationInfoCreationRequestedIn()
      definition: publicationRequestedIn;publicationInfoCreationRequestedIn # 콤마(,) 또는 세미콜론(;)으로 구분
    stream:
      kafka:
        binder:
          brokers: localhost:9092 # 로컬 개발 환경용 Kafka 주소 (호스트에서 직접 Kafka 실행 시)
          consumer:
            # Kafka 메시지 값을 JSON 문자열로 읽도록 지정합니다.
            # Spring Cloud Stream이 이 문자열을 PublicationRequested 객체로 변환합니다.
            value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
            # 또는, Spring Kafka의 JsonDeserializer를 직접 사용할 수도 있지만,
            # Spring Cloud Stream의 message converter가 보통 StringDeserializer와 함께 잘 작동합니다.
            # value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
            # enable.auto.commit은 true로 설정하여 메시지 처리 후 자동 커밋되도록 하는 것이 일반적입니다.
            # 수동 커밋을 원한다면 enable.auto.commit: false로 유지하고, `message.getHeaders().get(KafkaHeaders.ACKNOWLEDGMENT, Acknowledgment.class).acknowledge();`
            # 와 같은 코드를 메시지 처리 로직의 맨 끝에 추가해야 합니다.
            # 테스트 단계에서는 일단 true로 설정하여 메시지 소비 자체를 확인하는 것이 좋습니다.
            # auto-commit-offset: true # Spring Cloud Stream 3.x에서 autoCommitOffset은 consumer.enable-auto-commit으로 대체됩니다.
            enable-auto-commit: true
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        # PolicyHandler의 publicationRequestedIn() 메서드와 매핑됩니다.
        publicationRequestedIn-in-0: # 이 바인딩은 PublicationRequested 이벤트를 수신합니다.
          destination: aivlecloudnative
          group: aiservice-publication-request-group
          contentType: application/json
          consumer:
            maxAttempts: 3

        # PolicyHandler의 publicationInfoCreationRequestedIn() 메서드와 매핑됩니다.
        publicationInfoCreationRequestedIn-in-0: # 이 바인딩은 PublicationInfoCreationRequested 이벤트를 수신합니다.
          destination: aivlecloudnative
          group: aiservice-publication-info-group
          contentType: application/json
          consumer:
            maxAttempts: 3

        publicationInfoCreationRequested-out-0: # 이 바인딩은 이벤트를 발행합니다.
          destination: aivlecloudnative
          producer:
            headerMode: embeddedHeaders
            partitionCount: 1

  gpt:
    api-key: ${SPRING_GPT_API_KEY}
    base-url: https://api.openai.com/v1
    image-url: https://api.openai.com/v1
    model: gpt-4o-mini
    image-model: dall-e-3

logging:
  level:
    root: INFO
    org.hibernate.type: trace
    org.springframework.cloud: TRACE
    org.springframework.web.reactive.function.client: DEBUG
    aivlecloudnative: DEBUG
    org.springframework.cloud.stream: TRACE
    org.springframework.kafka: TRACE
    org.apache.kafka: TRACE

--- # --- 여기는 프로필 간의 구분선입니다. ---

server:
  port: 8084

spring:
  application:
    name: aiservice

  # --- Docker 프로파일 설정 ---
  config:
    activate:
      on-profile: docker # 'docker' 프로파일 활성화
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        implicit_naming_strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl
  cloud:
    function:
      # PolicyHandler에 정의된 모든 Consumer 빈 메서드 이름을 여기에 추가합니다.
      # publicationRequestedIn(), publicationInfoCreationRequestedIn()
      definition: publicationRequestedIn;publicationInfoCreationRequestedIn # 콤마(,) 또는 세미콜론(;)으로 구분
    stream:
      kafka:
        binder:
          brokers: my-kafka:9092 # Docker 네트워크 내부 통신용 Kafka 주소 (docker-compose.yml에 정의된 advertised.listeners의 PLAINTEXT://kafka:29092와 일치)
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        # PolicyHandler의 publicationRequestedIn() 메서드와 매핑됩니다.
        publicationRequestedIn-in-0:
          destination: aivlecloudnative
          group: aiservice-publication-request-group
          contentType: application/json
          consumer:
            maxAttempts: 3

        # PolicyHandler의 publicationInfoCreationRequestedIn() 메서드와 매핑됩니다.
        publicationInfoCreationRequestedIn-in-0:
          destination: aivlecloudnative
          group: aiservice-publication-info-group
          contentType: application/json
          consumer:
            maxAttempts: 3

        publicationInfoCreationRequested-out-0:
          destination: aivlecloudnative
          producer:
            headerMode: embeddedHeaders
            partitionCount: 1

  gpt:
    api-key: ${SPRING_GPT_API_KEY}
    base-url: https://api.openai.com/v1
    image-url: https://api.openai.com/v1
    model: gpt-4o-mini
    image-model: dall-e-3

logging:
  level:
    root: INFO
    org.hibernate.type: trace
    org.springframework.cloud: TRACE
    org.springframework.web.reactive.function.client: DEBUG
    aivlecloudnative: DEBUG
    org.springframework.cloud.stream: TRACE
    org.springframework.kafka: TRACE
    org.apache.kafka: TRACE