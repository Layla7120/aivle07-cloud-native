server:
  port: 8084

spring:
  application:
    name: aiservice
  # --- 기본 프로파일 설정 ---
  config:
    activate:
      on-profile: default
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        implicit_naming_strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl
  cloud:
    function: # <-- 이 위치에 definition이 있습니다.
      definition: publicationInfoCreationRequestedConsumer # 이벤트를 소비하는 컨슈머 함수 정의
    stream:
      kafka:
        binder:
          brokers: localhost:9092 # 기본 프로파일은 localhost (로컬 Kafka용)
          autoAddPartitions: true
          autoCreateTopics: true
          configuration: # Kafka Binder 설정 추가
            value.serializer: org.springframework.kafka.support.serializer.JsonSerializer
            value.deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
            spring.json.value.default.type: aivlecloudnative.domain.PublicationInfoCreationRequested # 가장 많이 사용되는 타입을 기본값으로 설정
            spring.json.trusted.packages: "aivlecloudnative.domain" # 혹은 모든 도메인 이벤트를 포함하는 패키지 지정
      bindings:
        # ---- Input Bindings (Consumers) ----
        publicationInfoCreationRequestedConsumer-in-0:
          destination: bookwork.publication-info.creation-requested
          group: aiservice-publication-info-group
          contentType: application/json
          consumer:
            auto-offset-reset: earliest
            # ↓↓↓ 이 부분 (consumer.configuration)이 새로 추가/수정되었습니다 ↓↓↓
            configuration:
              session.timeout.ms: 45000 # 세션 타임아웃을 45초로 설정 (기본값보다 길게)
              heartbeat.interval.ms: 15000 # 하트비트 간격을 15초로 설정 (세션 타임아웃의 1/3)
            # ↑↑↑ 이 부분 (consumer.configuration)이 새로 추가/수정되었습니다 ↑↑↑

        # ---- Output Bindings (Producers) ----
        publicationInfoCreationRequested-out-0:
          destination: bookwork.publication-info.creation-requested
          contentType: application/json
          producer:
            headerMode: embeddedHeaders
        
        event-out-0:
          destination: bookwork.auto-published
          contentType: application/json
          producer:
            headerMode: embeddedHeaders

  gpt:
    api-key: ${SPRING_GPT_API_KEY}
    base-url: https://api.openai.com/v1
    image-url: https://api.openai.com/v1
    model: gpt-4o-mini
    image-model: dall-e-3

logging:
  level:
    root: INFO
    org.hibernate.type: trace
    org.springframework.cloud: TRACE # 여기를 TRACE로 유지
    org.springframework.web.reactive.function.client: DEBUG
    aivlecloudnative: DEBUG
    org.springframework.cloud.stream: TRACE # 여기를 TRACE로 유지
    org.springframework.kafka: TRACE # 여기를 TRACE로 유지
    org.apache.kafka: TRACE # 여기를 TRACE로 유지

---
# --- Docker 프로파일 설정 ---
server:
  port: 8084

spring:
  config:
    activate:
      on-profile: docker
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        implicit_naming_strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl
  cloud:
    function: # <-- 이 위치에 definition이 있습니다.
      definition: publicationInfoCreationRequestedConsumer
    stream:
      kafka:
        binder:
          brokers: kafka:9092 # Docker Compose에서 서비스 이름
          autoAddPartitions: true
          autoCreateTopics: true
          configuration: # Kafka Binder 설정 추가 (필수)
            value.serializer: org.springframework.kafka.support.serializer.JsonSerializer
            value.deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
            spring.json.value.default.type: aivlecloudnative.domain.PublicationInfoCreationRequested # 기본 디시리얼라이즈 타입
            spring.json.trusted.packages: "aivlecloudnative.domain" # 신뢰할 패키지 지정
      bindings:
        # ---- Input Bindings (Consumers) ----
        publicationInfoCreationRequestedConsumer-in-0:
          destination: bookwork.publication-info.creation-requested
          group: aiservice-publication-info-group # Docker 프로파일용 그룹 ID
          contentType: application/json
          consumer:
            auto-offset-reset: earliest
            # ↓↓↓ 이 부분 (consumer.configuration)이 새로 추가/수정되었습니다 ↓↓↓
            configuration:
              session.timeout.ms: 45000 # 세션 타임아웃을 45초로 설정 (기본값보다 길게)
              heartbeat.interval.ms: 15000 # 하트비트 간격을 15초로 설정 (세션 타임아웃의 1/3)
            # ↑↑↑ 이 부분 (consumer.configuration)이 새로 추가/수정되었습니다 ↑↑↑

        # ---- Output Bindings (Producers) ----
        publicationInfoCreationRequested-out-0:
          destination: bookwork.publication-info.creation-requested
          contentType: application/json
          producer:
            headerMode: embeddedHeaders

        event-out-0:
          destination: bookwork.auto-published
          contentType: application/json
          producer:
            headerMode: embeddedHeaders

  gpt:
    api-key: ${SPRING_GPT_API_KEY}
    base-url: https://api.openai.com/v1
    image-url: https://api.openai.com/v1
    model: gpt-4o-mini
    image-model: dall-e-3

logging:
  level:
    root: INFO
    org.hibernate.type: TRACE
    org.springframework.cloud: TRACE # 여기를 TRACE로 유지
    org.springframework.web.reactive.function.client: DEBUG
    aivlecloudnative: DEBUG
    org.springframework.cloud.stream: TRACE # 여기를 TRACE로 유지
    org.springframework.kafka: TRACE # 여기를 TRACE로 유지
    org.apache.kafka: TRACE # 여기를 TRACE로 유지